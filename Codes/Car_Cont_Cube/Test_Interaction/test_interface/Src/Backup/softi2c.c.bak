/*
	@Copyright Han ZHANG(haldak) | All rights reserved.
	@Last Modified Time Nov.13, 2016
*/

/* Includes ------------------------------------------------------------------*/
#include "softi2c.h"
#include "tim.h"

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
static __IO uint32_t softTick;
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void DelayUS(uint32_t delayTimeUS)
{
	static uint32_t told = 0, tnow = 0, tcnt = 0, reload = 0, ticks = 0;
	tcnt = 0;
	told = htim1.Instance->CNT;
	reload = htim1.Instance->ARR;
	ticks = delayTimeUS * (HAL_RCC_GetHCLKFreq() / 1000000.0);
	while(1)
	{
		tnow = htim1.Instance->CNT;
		if(tnow != told)
		{
			if(tnow > told)//counter up mode
			{
				tcnt += tnow - told;
			}
			else//reload mode
			{
				tcnt += tnow + reload - told;
			}
			told = tnow;
			
			if(tcnt >= ticks)
			{
				break;
			}
		}
	}
}

void SCL_High(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
}

void SCL_Low(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
}

void SDA_High(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
}

void SDA_Low(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
}

GPIO_PinState SDA_Read(void)
{
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
}

void soft_I2CStart(void)
{
	SCL_High();
	SDA_High();
	DelayUS(2);
	SDA_Low();
}

void soft_I2CACK(void)
{
	SCL_Low();
	DelayUS(5);
	while(SDA_Read() == GPIO_PIN_SET);
	SCL_High();
	DelayUS(2);
	SCL_Low();
}

void soft_I2CStop(void)
{
	SCL_Low();
	DelayUS(2);
	SDA_Low();
	DelayUS(2);
	SCL_High();
	DelayUS(2);
	SDA_High();
}

void soft_I2CWrByte(uint8_t data)
{
	static uint8_t i;
	for(i = 0; i < 8; i++)
	{
		SCL_Low();
		if(data & 0x01)
			SDA_High();
		else
			SDA_Low();
		DelayUS(3);
		data >>= 1;
		SCL_High();
		DelayUS(3);
	}
}

void soft_SmgDisplay(void)
{
	static uint8_t i;
	soft_I2CStart();
	soft_I2CWrByte(0x40);
	soft_I2CACK();
	soft_I2CStop();
	
	soft_I2CStart();
	soft_I2CWrByte(0xC0);
	soft_I2CACK();
	for(i = 0; i < 6; i++)
	{
		soft_I2CWrByte(0xFF);
		soft_I2CACK();
	}
	soft_I2CStop();
	
	soft_I2CStart();
	soft_I2CWrByte(0x8F);
	soft_I2CACK();
	soft_I2CStop();
}
